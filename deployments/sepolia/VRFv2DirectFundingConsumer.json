{
  "address": "0x1cFDA9eBD0E3cd8aA1eeB010ca9b20530964268e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_requests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x868122ab9ee26a40f3cfdc56110b37fe6457d659abdecd8567ee9efbde49b304",
  "receipt": {
    "to": null,
    "from": "0xCC2a0cd3b5762126C460b73417Fe6a3bD0Ef8beD",
    "contractAddress": "0x1cFDA9eBD0E3cd8aA1eeB010ca9b20530964268e",
    "transactionIndex": 0,
    "gasUsed": "1127625",
    "logsBloom": "0x
    "blockHash": "0x0f4bb72562cf9999b060fa9150239388bb89fe4594705d237f4cf6d167a87fa7",
    "transactionHash": "0x868122ab9ee26a40f3cfdc56110b37fe6457d659abdecd8567ee9efbde49b304",
    "logs": [],
    "blockNumber": 8096304,
    "cumulativeGasUsed": "1127625",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "60910ddf05d740972fcd4ca00a49baae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"withdrawLink()\":{\"notice\":\"Allow withdraw of Link tokens from the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RandomIpfsNft.sol\":\"VRFv2DirectFundingConsumer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xd3643595b0a46f577fff806736cbe4e3f81707c93fb1693a8a7960466e5cd321\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFV2WrapperConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {LinkTokenInterface} from \\\"../shared/interfaces/LinkTokenInterface.sol\\\";\\nimport {VRFV2WrapperInterface} from \\\"./interfaces/VRFV2WrapperInterface.sol\\\";\\n\\n/** *******************************************************************************\\n * @notice Interface for contracts using VRF randomness through the VRF V2 wrapper\\n * ********************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Create VRF V2 requests without the need for subscription management. Rather than creating\\n * @dev and funding a VRF V2 subscription, a user can use this wrapper to create one off requests,\\n * @dev paying up front rather than at fulfillment.\\n *\\n * @dev Since the price is determined using the gas price of the request transaction rather than\\n * @dev the fulfillment transaction, the wrapper charges an additional premium on callback gas\\n * @dev usage, in addition to some extra overhead costs associated with the VRFV2Wrapper contract.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFV2WrapperConsumerBase. The consumer must be funded\\n * @dev with enough LINK to make the request, otherwise requests will revert. To request randomness,\\n * @dev call the 'requestRandomness' function with the desired VRF parameters. This function handles\\n * @dev paying for the request based on the current pricing.\\n *\\n * @dev Consumers must implement the fullfillRandomWords function, which will be called during\\n * @dev fulfillment with the randomness result.\\n */\\nabstract contract VRFV2WrapperConsumerBase {\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  LinkTokenInterface internal immutable LINK;\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  VRFV2WrapperInterface internal immutable VRF_V2_WRAPPER;\\n\\n  /**\\n   * @param _link is the address of LinkToken\\n   * @param _vrfV2Wrapper is the address of the VRFV2Wrapper contract\\n   */\\n  constructor(address _link, address _vrfV2Wrapper) {\\n    LINK = LinkTokenInterface(_link);\\n    VRF_V2_WRAPPER = VRFV2WrapperInterface(_vrfV2Wrapper);\\n  }\\n\\n  /**\\n   * @dev Requests randomness from the VRF V2 wrapper.\\n   *\\n   * @param _callbackGasLimit is the gas limit that should be used when calling the consumer's\\n   *        fulfillRandomWords function.\\n   * @param _requestConfirmations is the number of confirmations to wait before fulfilling the\\n   *        request. A higher number of confirmations increases security by reducing the likelihood\\n   *        that a chain re-org changes a published randomness outcome.\\n   * @param _numWords is the number of random words to request.\\n   *\\n   * @return requestId is the VRF V2 request ID of the newly created randomness request.\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function requestRandomness(\\n    uint32 _callbackGasLimit,\\n    uint16 _requestConfirmations,\\n    uint32 _numWords\\n  ) internal returns (uint256 requestId) {\\n    LINK.transferAndCall(\\n      address(VRF_V2_WRAPPER),\\n      VRF_V2_WRAPPER.calculateRequestPrice(_callbackGasLimit),\\n      abi.encode(_callbackGasLimit, _requestConfirmations, _numWords)\\n    );\\n    return VRF_V2_WRAPPER.lastRequestId();\\n  }\\n\\n  /**\\n   * @notice fulfillRandomWords handles the VRF V2 wrapper response. The consuming contract must\\n   * @notice implement it.\\n   *\\n   * @param _requestId is the VRF V2 request ID.\\n   * @param _randomWords is the randomness result.\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal virtual;\\n\\n  function rawFulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) external {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == address(VRF_V2_WRAPPER), \\\"only VRF V2 wrapper can fulfill\\\");\\n    fulfillRandomWords(_requestId, _randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x97bc383acc97074b3b7d6f68da70dce617699f54e0ed1ddd0c83ec7f83a4f07f\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFV2WrapperInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface VRFV2WrapperInterface {\\n  /**\\n   * @return the request ID of the most recent VRF V2 request made by this wrapper. This should only\\n   * be relied option within the same transaction that the request was made.\\n   */\\n  function lastRequestId() external view returns (uint256);\\n\\n  /**\\n   * @notice Calculates the price of a VRF request with the given callbackGasLimit at the current\\n   * @notice block.\\n   *\\n   * @dev This function relies on the transaction gas price which is not automatically set during\\n   * @dev simulation. To estimate the price at a specific gas price, use the estimatePrice function.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   */\\n  function calculateRequestPrice(uint32 _callbackGasLimit) external view returns (uint256);\\n\\n  /**\\n   * @notice Estimates the price of a VRF request with a specific gas limit and gas price.\\n   *\\n   * @dev This is a convenience function that can be called in simulation to better understand\\n   * @dev pricing.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   * @param _requestGasPriceWei is the gas price in wei used for the estimation.\\n   */\\n  function estimateRequestPrice(uint32 _callbackGasLimit, uint256 _requestGasPriceWei) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdf9f277fe960fbc1ba1160a59654c063a5a38c8e2d09069b66de4f46f4ed25c5\",\"license\":\"MIT\"},\"contracts/RandomIpfsNft.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport {VRFV2WrapperConsumerBase} from \\\"@chainlink/contracts/src/v0.8/vrf/VRFV2WrapperConsumerBase.sol\\\";\\r\\nimport {LinkTokenInterface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\\\";\\r\\n\\r\\ncontract VRFv2DirectFundingConsumer is\\r\\n    VRFV2WrapperConsumerBase\\r\\n{\\r\\n    event RequestSent(uint256 requestId, uint32 numWords);\\r\\n    event RequestFulfilled(\\r\\n        uint256 requestId,\\r\\n        uint256[] randomWords,\\r\\n        uint256 payment\\r\\n    );\\r\\n\\r\\n    struct RequestStatus {\\r\\n        uint256 paid;\\r\\n        bool fulfilled; \\r\\n        uint256[] randomWords;\\r\\n    }\\r\\n    mapping(uint256 => RequestStatus)\\r\\n        public s_requests;\\r\\n\\r\\n    uint256[] public requestIds;\\r\\n    uint256 public lastRequestId;\\r\\n\\r\\n    uint32 callbackGasLimit = 100000;\\r\\n\\r\\n    uint16 requestConfirmations = 3;\\r\\n\\r\\n    uint32 numWords = 1;\\r\\n\\r\\n    address linkAddress = 0x779877A7B0D9E8603169DdbD7836e478b4624789;\\r\\n\\r\\n    address wrapperAddress = 0xab18414CD93297B0d12ac29E63Ca20f515b3DB46;\\r\\n\\r\\n    constructor()\\r\\n        VRFV2WrapperConsumerBase(linkAddress, wrapperAddress)\\r\\n    {}\\r\\n\\r\\n    function requestRandomWords()\\r\\n        external\\r\\n        returns (uint256 requestId)\\r\\n    {\\r\\n        requestId = requestRandomness(\\r\\n            callbackGasLimit,\\r\\n            requestConfirmations,\\r\\n            numWords\\r\\n        );\\r\\n        s_requests[requestId] = RequestStatus({\\r\\n            paid: VRF_V2_WRAPPER.calculateRequestPrice(callbackGasLimit),\\r\\n            randomWords: new uint256[](0),\\r\\n            fulfilled: false\\r\\n        });\\r\\n        requestIds.push(requestId);\\r\\n        lastRequestId = requestId;\\r\\n        emit RequestSent(requestId, numWords);\\r\\n        return requestId;\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256 _requestId,\\r\\n        uint256[] memory _randomWords\\r\\n    ) internal override {\\r\\n        require(s_requests[_requestId].paid > 0, \\\"request not found\\\");\\r\\n        s_requests[_requestId].fulfilled = true;\\r\\n        s_requests[_requestId].randomWords = _randomWords;\\r\\n        emit RequestFulfilled(\\r\\n            _requestId,\\r\\n            _randomWords,\\r\\n            s_requests[_requestId].paid\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getRequestStatus(\\r\\n        uint256 _requestId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 paid, bool fulfilled, uint256[] memory randomWords)\\r\\n    {\\r\\n        require(s_requests[_requestId].paid > 0, \\\"request not found\\\");\\r\\n        RequestStatus memory request = s_requests[_requestId];\\r\\n        return (request.paid, request.fulfilled, request.randomWords);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Allow withdraw of Link tokens from the contract\\r\\n     */\\r\\n    function withdrawLink() public {\\r\\n        LinkTokenInterface link = LinkTokenInterface(linkAddress);\\r\\n        require(\\r\\n            link.transfer(msg.sender, link.balanceOf(address(this))),\\r\\n            \\\"Unable to transfer\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0d9602b5237fe27a5e1f84948edf66ac48f61efaeeab7210caa0d5b8f1b9d5fd\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x60c0604052620186a0600360006101000a81548163ffffffff021916908363ffffffff16021790555060038060046101000a81548161ffff021916908361ffff1602179055506001600360066101000a81548163ffffffff021916908363ffffffff16021790555073779877a7b0d9e8603169ddbd7836e478b46247896003600a6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073ab18414cd93297b0d12ac29e63ca20f515b3db46600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561011d57600080fd5b506003600a9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050505060805160a05161128d61020f6000396000818161017901528181610530015281816108590152818161087a015261099a0152600061081d015261128d6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a168fa891161005b578063a168fa89146100d8578063d8a4676f14610109578063e0c862891461013b578063fc2a88c3146101595761007d565b80631fe543e3146100825780638796ba8c1461009e5780638dc654a2146100ce575b600080fd5b61009c60048036038101906100979190610c3d565b610177565b005b6100b860048036038101906100b39190610c99565b610213565b6040516100c59190610cd5565b60405180910390f35b6100d6610237565b005b6100f260048036038101906100ed9190610c99565b610397565b604051610100929190610d0b565b60405180910390f35b610123600480360381019061011e9190610c99565b6103c8565b60405161013293929190610df2565b60405180910390f35b6101436104e0565b6040516101509190610cd5565b60405180910390f35b61016161070f565b60405161016e9190610cd5565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610205576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc90610e8d565b60405180910390fd5b61020f8282610715565b5050565b6001818154811061022357600080fd5b906000526020600020016000915090505481565b60006003600a9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102b49190610eee565b602060405180830381865afa1580156102d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f59190610f1e565b6040518363ffffffff1660e01b8152600401610312929190610f4b565b6020604051808303816000875af1158015610331573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103559190610fa0565b610394576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038b90611019565b60405180910390fd5b50565b60006020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16905082565b600080606060008060008681526020019081526020016000206000015411610425576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041c90611085565b60405180910390fd5b6000806000868152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a900460ff16151515158152602001600282018054806020026020016040519081016040528092919081815260200182805480156104b857602002820191906000526020600020905b8154815260200190600101908083116104a4575b5050505050815250509050806000015181602001518260400151935093509350509193909250565b6000610521600360009054906101000a900463ffffffff16600360049054906101000a900461ffff16600360069054906101000a900463ffffffff16610819565b905060405180606001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634306d354600360009054906101000a900463ffffffff166040518263ffffffff1660e01b815260040161059991906110c4565b602060405180830381865afa1580156105b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105da9190610f1e565b8152602001600015158152602001600067ffffffffffffffff81111561060357610602610afa565b5b6040519080825280602002602001820160405280156106315781602001602082028036833780820191505090505b508152506000808381526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff021916908315150217905550604082015181600201908051906020019061068d929190610a30565b509050506001819080600181540180825580915050600190039060005260206000200160009091909190915055806002819055507fcc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee81600360069054906101000a900463ffffffff166040516107049291906110df565b60405180910390a190565b60025481565b6000806000848152602001908152602001600020600001541161076d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076490611085565b60405180910390fd5b600160008084815260200190815260200160002060010160006101000a81548160ff0219169083151502179055508060008084815260200190815260200160002060020190805190602001906107c4929190610a30565b507f147eb1ff0c82f87f2b03e2c43f5a36488ff63ec6b730195fde4605f612f8db5182826000808681526020019081526020016000206000015460405161080d93929190611108565b60405180910390a15050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634306d354886040518263ffffffff1660e01b81526004016108d191906110c4565b602060405180830381865afa1580156108ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109129190610f1e565b87878760405160200161092793929190611163565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161095493929190611219565b6020604051808303816000875af1158015610973573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109979190610fa0565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fc2a88c36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a279190610f1e565b90509392505050565b828054828255906000526020600020908101928215610a6c579160200282015b82811115610a6b578251825591602001919060010190610a50565b5b509050610a799190610a7d565b5090565b5b80821115610a96576000816000905550600101610a7e565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610ac181610aae565b8114610acc57600080fd5b50565b600081359050610ade81610ab8565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b3282610ae9565b810181811067ffffffffffffffff82111715610b5157610b50610afa565b5b80604052505050565b6000610b64610a9a565b9050610b708282610b29565b919050565b600067ffffffffffffffff821115610b9057610b8f610afa565b5b602082029050602081019050919050565b600080fd5b6000610bb9610bb484610b75565b610b5a565b90508083825260208201905060208402830185811115610bdc57610bdb610ba1565b5b835b81811015610c055780610bf18882610acf565b845260208401935050602081019050610bde565b5050509392505050565b600082601f830112610c2457610c23610ae4565b5b8135610c34848260208601610ba6565b91505092915050565b60008060408385031215610c5457610c53610aa4565b5b6000610c6285828601610acf565b925050602083013567ffffffffffffffff811115610c8357610c82610aa9565b5b610c8f85828601610c0f565b9150509250929050565b600060208284031215610caf57610cae610aa4565b5b6000610cbd84828501610acf565b91505092915050565b610ccf81610aae565b82525050565b6000602082019050610cea6000830184610cc6565b92915050565b60008115159050919050565b610d0581610cf0565b82525050565b6000604082019050610d206000830185610cc6565b610d2d6020830184610cfc565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610d6981610aae565b82525050565b6000610d7b8383610d60565b60208301905092915050565b6000602082019050919050565b6000610d9f82610d34565b610da98185610d3f565b9350610db483610d50565b8060005b83811015610de5578151610dcc8882610d6f565b9750610dd783610d87565b925050600181019050610db8565b5085935050505092915050565b6000606082019050610e076000830186610cc6565b610e146020830185610cfc565b8181036040830152610e268184610d94565b9050949350505050565b600082825260208201905092915050565b7f6f6e6c792056524620563220777261707065722063616e2066756c66696c6c00600082015250565b6000610e77601f83610e30565b9150610e8282610e41565b602082019050919050565b60006020820190508181036000830152610ea681610e6a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ed882610ead565b9050919050565b610ee881610ecd565b82525050565b6000602082019050610f036000830184610edf565b92915050565b600081519050610f1881610ab8565b92915050565b600060208284031215610f3457610f33610aa4565b5b6000610f4284828501610f09565b91505092915050565b6000604082019050610f606000830185610edf565b610f6d6020830184610cc6565b9392505050565b610f7d81610cf0565b8114610f8857600080fd5b50565b600081519050610f9a81610f74565b92915050565b600060208284031215610fb657610fb5610aa4565b5b6000610fc484828501610f8b565b91505092915050565b7f556e61626c6520746f207472616e736665720000000000000000000000000000600082015250565b6000611003601283610e30565b915061100e82610fcd565b602082019050919050565b6000602082019050818103600083015261103281610ff6565b9050919050565b7f72657175657374206e6f7420666f756e64000000000000000000000000000000600082015250565b600061106f601183610e30565b915061107a82611039565b602082019050919050565b6000602082019050818103600083015261109e81611062565b9050919050565b600063ffffffff82169050919050565b6110be816110a5565b82525050565b60006020820190506110d960008301846110b5565b92915050565b60006040820190506110f46000830185610cc6565b61110160208301846110b5565b9392505050565b600060608201905061111d6000830186610cc6565b818103602083015261112f8185610d94565b905061113e6040830184610cc6565b949350505050565b600061ffff82169050919050565b61115d81611146565b82525050565b600060608201905061117860008301866110b5565b6111856020830185611154565b61119260408301846110b5565b949350505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111d45780820151818401526020810190506111b9565b60008484015250505050565b60006111eb8261119a565b6111f581856111a5565b93506112058185602086016111b6565b61120e81610ae9565b840191505092915050565b600060608201905061122e6000830186610edf565b61123b6020830185610cc6565b818103604083015261124d81846111e0565b905094935050505056fea2646970667358221220ea0d8c559a3fbdb98f802649eef7de66cba89144af2ac56a5cfe061f000ca13a64736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a168fa891161005b578063a168fa89146100d8578063d8a4676f14610109578063e0c862891461013b578063fc2a88c3146101595761007d565b80631fe543e3146100825780638796ba8c1461009e5780638dc654a2146100ce575b600080fd5b61009c60048036038101906100979190610c3d565b610177565b005b6100b860048036038101906100b39190610c99565b610213565b6040516100c59190610cd5565b60405180910390f35b6100d6610237565b005b6100f260048036038101906100ed9190610c99565b610397565b604051610100929190610d0b565b60405180910390f35b610123600480360381019061011e9190610c99565b6103c8565b60405161013293929190610df2565b60405180910390f35b6101436104e0565b6040516101509190610cd5565b60405180910390f35b61016161070f565b60405161016e9190610cd5565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610205576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc90610e8d565b60405180910390fd5b61020f8282610715565b5050565b6001818154811061022357600080fd5b906000526020600020016000915090505481565b60006003600a9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102b49190610eee565b602060405180830381865afa1580156102d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f59190610f1e565b6040518363ffffffff1660e01b8152600401610312929190610f4b565b6020604051808303816000875af1158015610331573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103559190610fa0565b610394576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038b90611019565b60405180910390fd5b50565b60006020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16905082565b600080606060008060008681526020019081526020016000206000015411610425576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041c90611085565b60405180910390fd5b6000806000868152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a900460ff16151515158152602001600282018054806020026020016040519081016040528092919081815260200182805480156104b857602002820191906000526020600020905b8154815260200190600101908083116104a4575b5050505050815250509050806000015181602001518260400151935093509350509193909250565b6000610521600360009054906101000a900463ffffffff16600360049054906101000a900461ffff16600360069054906101000a900463ffffffff16610819565b905060405180606001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634306d354600360009054906101000a900463ffffffff166040518263ffffffff1660e01b815260040161059991906110c4565b602060405180830381865afa1580156105b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105da9190610f1e565b8152602001600015158152602001600067ffffffffffffffff81111561060357610602610afa565b5b6040519080825280602002602001820160405280156106315781602001602082028036833780820191505090505b508152506000808381526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff021916908315150217905550604082015181600201908051906020019061068d929190610a30565b509050506001819080600181540180825580915050600190039060005260206000200160009091909190915055806002819055507fcc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee81600360069054906101000a900463ffffffff166040516107049291906110df565b60405180910390a190565b60025481565b6000806000848152602001908152602001600020600001541161076d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076490611085565b60405180910390fd5b600160008084815260200190815260200160002060010160006101000a81548160ff0219169083151502179055508060008084815260200190815260200160002060020190805190602001906107c4929190610a30565b507f147eb1ff0c82f87f2b03e2c43f5a36488ff63ec6b730195fde4605f612f8db5182826000808681526020019081526020016000206000015460405161080d93929190611108565b60405180910390a15050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634306d354886040518263ffffffff1660e01b81526004016108d191906110c4565b602060405180830381865afa1580156108ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109129190610f1e565b87878760405160200161092793929190611163565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161095493929190611219565b6020604051808303816000875af1158015610973573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109979190610fa0565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fc2a88c36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a279190610f1e565b90509392505050565b828054828255906000526020600020908101928215610a6c579160200282015b82811115610a6b578251825591602001919060010190610a50565b5b509050610a799190610a7d565b5090565b5b80821115610a96576000816000905550600101610a7e565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610ac181610aae565b8114610acc57600080fd5b50565b600081359050610ade81610ab8565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b3282610ae9565b810181811067ffffffffffffffff82111715610b5157610b50610afa565b5b80604052505050565b6000610b64610a9a565b9050610b708282610b29565b919050565b600067ffffffffffffffff821115610b9057610b8f610afa565b5b602082029050602081019050919050565b600080fd5b6000610bb9610bb484610b75565b610b5a565b90508083825260208201905060208402830185811115610bdc57610bdb610ba1565b5b835b81811015610c055780610bf18882610acf565b845260208401935050602081019050610bde565b5050509392505050565b600082601f830112610c2457610c23610ae4565b5b8135610c34848260208601610ba6565b91505092915050565b60008060408385031215610c5457610c53610aa4565b5b6000610c6285828601610acf565b925050602083013567ffffffffffffffff811115610c8357610c82610aa9565b5b610c8f85828601610c0f565b9150509250929050565b600060208284031215610caf57610cae610aa4565b5b6000610cbd84828501610acf565b91505092915050565b610ccf81610aae565b82525050565b6000602082019050610cea6000830184610cc6565b92915050565b60008115159050919050565b610d0581610cf0565b82525050565b6000604082019050610d206000830185610cc6565b610d2d6020830184610cfc565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610d6981610aae565b82525050565b6000610d7b8383610d60565b60208301905092915050565b6000602082019050919050565b6000610d9f82610d34565b610da98185610d3f565b9350610db483610d50565b8060005b83811015610de5578151610dcc8882610d6f565b9750610dd783610d87565b925050600181019050610db8565b5085935050505092915050565b6000606082019050610e076000830186610cc6565b610e146020830185610cfc565b8181036040830152610e268184610d94565b9050949350505050565b600082825260208201905092915050565b7f6f6e6c792056524620563220777261707065722063616e2066756c66696c6c00600082015250565b6000610e77601f83610e30565b9150610e8282610e41565b602082019050919050565b60006020820190508181036000830152610ea681610e6a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ed882610ead565b9050919050565b610ee881610ecd565b82525050565b6000602082019050610f036000830184610edf565b92915050565b600081519050610f1881610ab8565b92915050565b600060208284031215610f3457610f33610aa4565b5b6000610f4284828501610f09565b91505092915050565b6000604082019050610f606000830185610edf565b610f6d6020830184610cc6565b9392505050565b610f7d81610cf0565b8114610f8857600080fd5b50565b600081519050610f9a81610f74565b92915050565b600060208284031215610fb657610fb5610aa4565b5b6000610fc484828501610f8b565b91505092915050565b7f556e61626c6520746f207472616e736665720000000000000000000000000000600082015250565b6000611003601283610e30565b915061100e82610fcd565b602082019050919050565b6000602082019050818103600083015261103281610ff6565b9050919050565b7f72657175657374206e6f7420666f756e64000000000000000000000000000000600082015250565b600061106f601183610e30565b915061107a82611039565b602082019050919050565b6000602082019050818103600083015261109e81611062565b9050919050565b600063ffffffff82169050919050565b6110be816110a5565b82525050565b60006020820190506110d960008301846110b5565b92915050565b60006040820190506110f46000830185610cc6565b61110160208301846110b5565b9392505050565b600060608201905061111d6000830186610cc6565b818103602083015261112f8185610d94565b905061113e6040830184610cc6565b949350505050565b600061ffff82169050919050565b61115d81611146565b82525050565b600060608201905061117860008301866110b5565b6111856020830185611154565b61119260408301846110b5565b949350505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111d45780820151818401526020810190506111b9565b60008484015250505050565b60006111eb8261119a565b6111f581856111a5565b93506112058185602086016111b6565b61120e81610ae9565b840191505092915050565b600060608201905061122e6000830186610edf565b61123b6020830185610cc6565b818103604083015261124d81846111e0565b905094935050505056fea2646970667358221220ea0d8c559a3fbdb98f802649eef7de66cba89144af2ac56a5cfe061f000ca13a64736f6c634300081c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "withdrawLink()": {
        "notice": "Allow withdraw of Link tokens from the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 262,
        "contract": "contracts/RandomIpfsNft.sol:VRFv2DirectFundingConsumer",
        "label": "s_requests",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(RequestStatus)257_storage)"
      },
      {
        "astId": 265,
        "contract": "contracts/RandomIpfsNft.sol:VRFv2DirectFundingConsumer",
        "label": "requestIds",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 267,
        "contract": "contracts/RandomIpfsNft.sol:VRFv2DirectFundingConsumer",
        "label": "lastRequestId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 270,
        "contract": "contracts/RandomIpfsNft.sol:VRFv2DirectFundingConsumer",
        "label": "callbackGasLimit",
        "offset": 0,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 273,
        "contract": "contracts/RandomIpfsNft.sol:VRFv2DirectFundingConsumer",
        "label": "requestConfirmations",
        "offset": 4,
        "slot": "3",
        "type": "t_uint16"
      },
      {
        "astId": 276,
        "contract": "contracts/RandomIpfsNft.sol:VRFv2DirectFundingConsumer",
        "label": "numWords",
        "offset": 6,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 279,
        "contract": "contracts/RandomIpfsNft.sol:VRFv2DirectFundingConsumer",
        "label": "linkAddress",
        "offset": 10,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 282,
        "contract": "contracts/RandomIpfsNft.sol:VRFv2DirectFundingConsumer",
        "label": "wrapperAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(RequestStatus)257_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VRFv2DirectFundingConsumer.RequestStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestStatus)257_storage"
      },
      "t_struct(RequestStatus)257_storage": {
        "encoding": "inplace",
        "label": "struct VRFv2DirectFundingConsumer.RequestStatus",
        "members": [
          {
            "astId": 251,
            "contract": "contracts/RandomIpfsNft.sol:VRFv2DirectFundingConsumer",
            "label": "paid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 253,
            "contract": "contracts/RandomIpfsNft.sol:VRFv2DirectFundingConsumer",
            "label": "fulfilled",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 256,
            "contract": "contracts/RandomIpfsNft.sol:VRFv2DirectFundingConsumer",
            "label": "randomWords",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}